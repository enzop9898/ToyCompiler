
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import Node.*;
import java.util.*;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import Visitor.SyntaxVisitor;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\004" +
    "\000\002\010\005\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\011\003\000\002" +
    "\011\005\000\002\011\005\000\002\011\007\000\002\006" +
    "\017\000\002\006\016\000\002\006\016\000\002\006\015" +
    "\000\002\012\003\000\002\012\005\000\002\013\003\000" +
    "\002\013\002\000\002\020\003\000\002\020\005\000\002" +
    "\015\003\000\002\015\005\000\002\014\004\000\002\026" +
    "\003\000\002\026\005\000\002\016\003\000\002\016\003" +
    "\000\002\030\003\000\002\030\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\005\011\000\002\033" +
    "\004\000\002\033\002\000\002\032\006\000\002\031\004" +
    "\000\002\031\002\000\002\027\011\000\002\027\007\000" +
    "\002\021\006\000\002\022\006\000\002\023\005\000\002" +
    "\024\006\000\002\024\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\004\000" +
    "\002\025\004\000\002\025\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\014\006\013\007\007\010\012\011\011\012" +
    "\ufffe\001\002\000\004\002\254\001\002\000\004\012\110" +
    "\001\002\000\004\057\015\001\002\000\010\005\ufff7\015" +
    "\ufff7\057\ufff7\001\002\000\030\006\013\007\007\010\012" +
    "\011\011\012\ufffe\020\ufffe\025\ufffe\030\ufffe\031\ufffe\051" +
    "\ufffe\057\ufffe\001\002\000\010\005\ufff9\015\ufff9\057\ufff9" +
    "\001\002\000\010\005\ufff8\015\ufff8\057\ufff8\001\002\000" +
    "\010\005\ufffa\015\ufffa\057\ufffa\001\002\000\020\012\uffff" +
    "\020\uffff\025\uffff\030\uffff\031\uffff\051\uffff\057\uffff\001" +
    "\002\000\010\004\ufff6\005\ufff6\032\105\001\002\000\006" +
    "\004\020\005\017\001\002\000\004\057\021\001\002\000" +
    "\030\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\020\ufffb" +
    "\025\ufffb\030\ufffb\031\ufffb\051\ufffb\057\ufffb\001\002\000" +
    "\010\004\ufff4\005\ufff4\032\022\001\002\000\026\034\023" +
    "\047\036\050\033\053\025\054\026\055\024\056\032\057" +
    "\035\060\031\061\034\001\002\000\026\034\023\047\036" +
    "\050\033\053\025\054\026\055\024\056\032\057\035\060" +
    "\031\061\034\001\002\000\050\004\uffc8\005\uffc8\014\uffc8" +
    "\016\uffc8\021\uffc8\024\uffc8\026\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\001\002\000\026\034\023\047" +
    "\036\050\033\053\025\054\026\055\024\056\032\057\035" +
    "\060\031\061\034\001\002\000\050\004\uffc9\005\uffc9\014" +
    "\uffc9\016\uffc9\021\uffc9\024\uffc9\026\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\001\002\000\036\004\ufff3" +
    "\005\ufff3\033\043\034\040\035\050\036\046\037\044\040" +
    "\051\041\052\042\045\043\047\044\042\045\041\046\053" +
    "\001\002\000\050\004\uffc5\005\uffc5\014\uffc5\016\uffc5\021" +
    "\uffc5\024\uffc5\026\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\001\002\000\050\004\uffcb\005\uffcb\014\uffcb" +
    "\016\uffcb\021\uffcb\024\uffcb\026\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\001\002\000\050\004\uffc7\005" +
    "\uffc7\014\uffc7\016\uffc7\021\uffc7\024\uffc7\026\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\001\002\000\050" +
    "\004\uffcc\005\uffcc\014\uffcc\016\uffcc\021\uffcc\024\uffcc\026" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\001" +
    "\002\000\050\004\uffca\005\uffca\014\uffca\016\uffca\021\uffca" +
    "\024\uffca\026\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca" +
    "\046\uffca\001\002\000\052\004\uffc6\005\uffc6\013\070\014" +
    "\uffc6\016\uffc6\021\uffc6\024\uffc6\026\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\001\002\000\026\034\023" +
    "\047\036\050\033\053\025\054\026\055\024\056\032\057" +
    "\035\060\031\061\034\001\002\000\050\004\uffb7\005\uffb7" +
    "\014\uffb7\016\uffb7\021\uffb7\024\uffb7\026\uffb7\033\043\034" +
    "\040\035\050\036\046\037\044\040\051\041\052\042\045" +
    "\043\047\044\042\045\041\046\053\001\002\000\026\034" +
    "\023\047\036\050\033\053\025\054\026\055\024\056\032" +
    "\057\035\060\031\061\034\001\002\000\026\034\023\047" +
    "\036\050\033\053\025\054\026\055\024\056\032\057\035" +
    "\060\031\061\034\001\002\000\026\034\023\047\036\050" +
    "\033\053\025\054\026\055\024\056\032\057\035\060\031" +
    "\061\034\001\002\000\026\034\023\047\036\050\033\053" +
    "\025\054\026\055\024\056\032\057\035\060\031\061\034" +
    "\001\002\000\026\034\023\047\036\050\033\053\025\054" +
    "\026\055\024\056\032\057\035\060\031\061\034\001\002" +
    "\000\026\034\023\047\036\050\033\053\025\054\026\055" +
    "\024\056\032\057\035\060\031\061\034\001\002\000\026" +
    "\034\023\047\036\050\033\053\025\054\026\055\024\056" +
    "\032\057\035\060\031\061\034\001\002\000\026\034\023" +
    "\047\036\050\033\053\025\054\026\055\024\056\032\057" +
    "\035\060\031\061\034\001\002\000\026\034\023\047\036" +
    "\050\033\053\025\054\026\055\024\056\032\057\035\060" +
    "\031\061\034\001\002\000\026\034\023\047\036\050\033" +
    "\053\025\054\026\055\024\056\032\057\035\060\031\061" +
    "\034\001\002\000\026\034\023\047\036\050\033\053\025" +
    "\054\026\055\024\056\032\057\035\060\031\061\034\001" +
    "\002\000\026\034\023\047\036\050\033\053\025\054\026" +
    "\055\024\056\032\057\035\060\031\061\034\001\002\000" +
    "\050\004\uffbf\005\uffbf\014\uffbf\016\uffbf\021\uffbf\024\uffbf" +
    "\026\uffbf\033\043\034\040\035\050\036\046\037\044\040" +
    "\051\041\052\042\045\043\047\044\042\045\uffbf\046\uffbf" +
    "\001\002\000\050\004\uffbc\005\uffbc\014\uffbc\016\uffbc\021" +
    "\uffbc\024\uffbc\026\uffbc\033\043\034\040\035\050\036\046" +
    "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045" +
    "\uffbc\046\uffbc\001\002\000\050\004\uffb9\005\uffb9\014\uffb9" +
    "\016\uffb9\021\uffb9\024\uffb9\026\uffb9\033\043\034\040\035" +
    "\050\036\046\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\001\002\000\050\004\uffc2\005" +
    "\uffc2\014\uffc2\016\uffc2\021\uffc2\024\uffc2\026\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\046\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\001\002\000\050" +
    "\004\uffbe\005\uffbe\014\uffbe\016\uffbe\021\uffbe\024\uffbe\026" +
    "\uffbe\033\043\034\040\035\050\036\046\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\001" +
    "\002\000\050\004\uffc1\005\uffc1\014\uffc1\016\uffc1\021\uffc1" +
    "\024\uffc1\026\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\001\002\000\050\004\uffbb\005\uffbb\014\uffbb\016" +
    "\uffbb\021\uffbb\024\uffbb\026\uffbb\033\043\034\040\035\050" +
    "\036\046\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044" +
    "\uffbb\045\uffbb\046\uffbb\001\002\000\050\004\uffba\005\uffba" +
    "\014\uffba\016\uffba\021\uffba\024\uffba\026\uffba\033\043\034" +
    "\040\035\050\036\046\037\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\046\uffba\001\002\000\050\004" +
    "\uffc4\005\uffc4\014\uffc4\016\uffc4\021\uffc4\024\uffc4\026\uffc4" +
    "\033\uffc4\034\uffc4\035\050\036\046\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\001\002" +
    "\000\050\004\uffbd\005\uffbd\014\uffbd\016\uffbd\021\uffbd\024" +
    "\uffbd\026\uffbd\033\043\034\040\035\050\036\046\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046" +
    "\uffbd\001\002\000\050\004\uffc0\005\uffc0\014\uffc0\016\uffc0" +
    "\021\uffc0\024\uffc0\026\uffc0\033\043\034\040\035\050\036" +
    "\046\037\044\040\051\041\052\042\045\043\047\044\042" +
    "\045\uffc0\046\uffc0\001\002\000\050\004\uffc3\005\uffc3\014" +
    "\uffc3\016\uffc3\021\uffc3\024\uffc3\026\uffc3\033\uffc3\034\uffc3" +
    "\035\050\036\046\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\046\uffc3\001\002\000\030\014\073" +
    "\034\023\047\036\050\033\053\025\054\026\055\024\056" +
    "\032\057\035\060\031\061\034\001\002\000\042\004\uffea" +
    "\005\075\014\uffea\016\uffea\033\043\034\040\035\050\036" +
    "\046\037\044\040\051\041\052\042\045\043\047\044\042" +
    "\045\041\046\053\001\002\000\004\014\074\001\002\000" +
    "\050\004\uffcd\005\uffcd\014\uffcd\016\uffcd\021\uffcd\024\uffcd" +
    "\026\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd" +
    "\001\002\000\050\004\uffce\005\uffce\014\uffce\016\uffce\021" +
    "\uffce\024\uffce\026\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045" +
    "\uffce\046\uffce\001\002\000\026\034\023\047\036\050\033" +
    "\053\025\054\026\055\024\056\032\057\035\060\031\061" +
    "\034\001\002\000\010\004\uffe9\014\uffe9\016\uffe9\001\002" +
    "\000\034\021\100\033\043\034\040\035\050\036\046\037" +
    "\044\040\051\041\052\042\045\043\047\044\042\045\041" +
    "\046\053\001\002\000\026\034\023\047\036\050\033\053" +
    "\025\054\026\055\024\056\032\057\035\060\031\061\034" +
    "\001\002\000\034\024\102\033\043\034\040\035\050\036" +
    "\046\037\044\040\051\041\052\042\045\043\047\044\042" +
    "\045\041\046\053\001\002\000\026\034\023\047\036\050" +
    "\033\053\025\054\026\055\024\056\032\057\035\060\031" +
    "\061\034\001\002\000\050\004\uffb6\005\uffb6\014\uffb6\016" +
    "\uffb6\021\uffb6\024\uffb6\026\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\001\002\000\050\004\uffb8\005\uffb8" +
    "\014\uffb8\016\uffb8\021\uffb8\024\uffb8\026\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\uffb8\001\002\000\026\034" +
    "\023\047\036\050\033\053\025\054\026\055\024\056\032" +
    "\057\035\060\031\061\034\001\002\000\036\004\ufff5\005" +
    "\ufff5\033\043\034\040\035\050\036\046\037\044\040\051" +
    "\041\052\042\045\043\047\044\042\045\041\046\053\001" +
    "\002\000\004\002\001\001\002\000\004\057\113\001\002" +
    "\000\006\002\ufffd\012\110\001\002\000\004\002\ufffc\001" +
    "\002\000\004\013\114\001\002\000\014\006\013\007\007" +
    "\010\012\011\011\014\117\001\002\000\004\057\231\001" +
    "\002\000\006\004\234\014\235\001\002\000\014\006\013" +
    "\007\007\010\012\011\011\017\124\001\002\000\006\004" +
    "\uffe8\014\uffe8\001\002\000\006\005\uffe3\015\uffe3\001\002" +
    "\000\004\015\127\001\002\000\006\005\125\015\uffee\001" +
    "\002\000\006\005\uffe2\015\uffe2\001\002\000\014\006\013" +
    "\007\007\010\012\011\011\017\124\001\002\000\004\015" +
    "\uffed\001\002\000\026\006\013\007\007\010\012\011\011" +
    "\020\ufffe\025\ufffe\030\ufffe\031\ufffe\051\ufffe\057\ufffe\001" +
    "\002\000\016\020\136\025\132\030\131\031\142\051\147" +
    "\057\141\001\002\000\004\013\230\001\002\000\036\020" +
    "\136\025\132\030\131\031\142\034\023\047\036\050\033" +
    "\053\025\054\026\055\024\056\032\057\216\060\031\061" +
    "\034\001\002\000\004\004\213\001\002\000\004\004\212" +
    "\001\002\000\004\004\211\001\002\000\026\034\023\047" +
    "\036\050\033\053\025\054\026\055\024\056\032\057\035" +
    "\060\031\061\034\001\002\000\004\051\167\001\002\000" +
    "\004\004\166\001\002\000\010\005\uffe5\013\070\032\uffe5" +
    "\001\002\000\004\013\163\001\002\000\004\004\162\001" +
    "\002\000\006\005\156\032\157\001\002\000\004\004\155" +
    "\001\002\000\026\020\136\022\uffe1\023\uffe1\024\uffe1\025" +
    "\132\027\uffe1\030\131\031\142\051\uffe1\057\141\001\002" +
    "\000\030\016\uffeb\034\023\047\036\050\033\053\025\054" +
    "\026\055\024\056\032\057\035\060\031\061\034\001\002" +
    "\000\004\016\uffec\001\002\000\004\016\152\001\002\000" +
    "\004\004\153\001\002\000\006\002\uffef\012\uffef\001\002" +
    "\000\014\022\uffe0\023\uffe0\024\uffe0\027\uffe0\051\uffe0\001" +
    "\002\000\026\020\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\051\uffdc\057\uffdc\001\002\000" +
    "\004\057\161\001\002\000\026\034\023\047\036\050\033" +
    "\053\025\054\026\055\024\056\032\057\035\060\031\061" +
    "\034\001\002\000\004\004\uffcf\001\002\000\012\004\uffe4" +
    "\005\uffe4\014\uffe4\032\uffe4\001\002\000\026\020\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\051\uffdd\057\uffdd\001\002\000\026\034\023\047\036\050" +
    "\033\053\025\054\026\055\024\056\032\057\035\060\031" +
    "\061\034\001\002\000\004\014\165\001\002\000\004\004" +
    "\uffd0\001\002\000\026\020\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\027\uffdb\030\uffdb\031\uffdb\051\uffdb\057\uffdb\001" +
    "\002\000\030\016\uffeb\034\023\047\036\050\033\053\025" +
    "\054\026\055\024\056\032\057\035\060\031\061\034\001" +
    "\002\000\004\016\171\001\002\000\004\004\172\001\002" +
    "\000\006\002\ufff0\012\ufff0\001\002\000\034\021\174\033" +
    "\043\034\040\035\050\036\046\037\044\040\051\041\052" +
    "\042\045\043\047\044\042\045\041\046\053\001\002\000" +
    "\014\020\136\025\132\030\131\031\142\057\141\001\002" +
    "\000\010\022\177\023\uffd7\024\uffd7\001\002\000\006\023" +
    "\uffd4\024\205\001\002\000\026\034\023\047\036\050\033" +
    "\053\025\054\026\055\024\056\032\057\035\060\031\061" +
    "\034\001\002\000\010\022\177\023\uffd7\024\uffd7\001\002" +
    "\000\006\023\uffd8\024\uffd8\001\002\000\034\021\203\033" +
    "\043\034\040\035\050\036\046\037\044\040\051\041\052" +
    "\042\045\043\047\044\042\045\041\046\053\001\002\000" +
    "\014\020\136\025\132\030\131\031\142\057\141\001\002" +
    "\000\010\022\uffd6\023\uffd6\024\uffd6\001\002\000\014\020" +
    "\136\025\132\030\131\031\142\057\141\001\002\000\004" +
    "\023\207\001\002\000\004\004\uffd9\001\002\000\004\023" +
    "\uffd5\001\002\000\026\020\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\027\uffdf\030\uffdf\031\uffdf\051\uffdf\057\uffdf\001" +
    "\002\000\026\020\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\027\uffda\030\uffda\031\uffda\051\uffda\057\uffda\001\002\000" +
    "\026\020\uffde\022\uffde\023\uffde\024\uffde\025\uffde\027\uffde" +
    "\030\uffde\031\uffde\051\uffde\057\uffde\001\002\000\036\004" +
    "\212\026\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\001\002\000\034\026\225\033\043\034\040\035\050" +
    "\036\046\037\044\040\051\041\052\042\045\043\047\044" +
    "\042\045\041\046\053\001\002\000\042\005\uffe5\013\070" +
    "\026\uffc6\032\uffe5\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\001\002\000\004\051\220\001\002\000\026\034" +
    "\023\047\036\050\033\053\025\054\026\055\024\056\032" +
    "\057\035\060\031\061\034\001\002\000\034\026\222\033" +
    "\043\034\040\035\050\036\046\037\044\040\051\041\052" +
    "\042\045\043\047\044\042\045\041\046\053\001\002\000" +
    "\014\020\136\025\132\030\131\031\142\057\141\001\002" +
    "\000\004\027\224\001\002\000\004\004\uffd3\001\002\000" +
    "\014\020\136\025\132\030\131\031\142\057\141\001\002" +
    "\000\004\027\227\001\002\000\004\004\uffd2\001\002\000" +
    "\004\057\231\001\002\000\010\004\uffe5\005\uffe5\014\uffe5" +
    "\001\002\000\006\005\156\014\233\001\002\000\004\004" +
    "\uffd1\001\002\000\012\006\013\007\007\010\012\011\011" +
    "\001\002\000\014\006\013\007\007\010\012\011\011\017" +
    "\124\001\002\000\004\015\237\001\002\000\026\006\013" +
    "\007\007\010\012\011\011\020\ufffe\025\ufffe\030\ufffe\031" +
    "\ufffe\051\ufffe\057\ufffe\001\002\000\016\020\136\025\132" +
    "\030\131\031\142\051\242\057\141\001\002\000\004\051" +
    "\246\001\002\000\030\016\uffeb\034\023\047\036\050\033" +
    "\053\025\054\026\055\024\056\032\057\035\060\031\061" +
    "\034\001\002\000\004\016\244\001\002\000\004\004\245" +
    "\001\002\000\006\002\ufff1\012\ufff1\001\002\000\030\016" +
    "\uffeb\034\023\047\036\050\033\053\025\054\026\055\024" +
    "\056\032\057\035\060\031\061\034\001\002\000\004\016" +
    "\250\001\002\000\004\004\251\001\002\000\006\002\ufff2" +
    "\012\ufff2\001\002\000\006\004\uffe7\014\uffe7\001\002\000" +
    "\010\004\uffe6\005\156\014\uffe6\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\012\002\003\003\004\007\005\010\007\001" +
    "\001\000\002\001\001\000\006\004\106\006\110\001\001" +
    "\000\004\011\015\001\001\000\002\001\001\000\010\003" +
    "\013\007\005\010\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\027\025\026\001\001\000" +
    "\006\024\027\025\103\001\001\000\002\001\001\000\006" +
    "\024\027\025\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\027\025\036\001\001\000\002\001\001\000\006" +
    "\024\027\025\066\001\001\000\006\024\027\025\065\001" +
    "\001\000\006\024\027\025\064\001\001\000\006\024\027" +
    "\025\063\001\001\000\006\024\027\025\062\001\001\000" +
    "\006\024\027\025\061\001\001\000\006\024\027\025\060" +
    "\001\001\000\006\024\027\025\057\001\001\000\006\024" +
    "\027\025\056\001\001\000\006\024\027\025\055\001\001" +
    "\000\006\024\027\025\054\001\001\000\006\024\027\025" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\071\024\027\025\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\075\024\027\025\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\027\025\100\001\001\000" +
    "\002\001\001\000\006\024\027\025\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\027\025\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\111\006\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\114\014\117\015\115\001\001" +
    "\000\004\026\252\001\001\000\002\001\001\000\010\007" +
    "\120\012\121\016\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\120\012\125\016\122\001\001\000\002" +
    "\001\001\000\010\003\127\007\005\010\007\001\001\000" +
    "\024\005\134\017\145\021\142\022\144\023\137\024\133" +
    "\026\143\027\132\030\136\001\001\000\002\001\001\000" +
    "\026\005\134\017\145\021\142\022\144\023\137\024\213" +
    "\025\214\026\143\027\132\030\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\027" +
    "\025\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\134\017\145\021" +
    "\142\022\144\023\137\024\133\026\143\027\132\030\153" +
    "\001\001\000\012\013\150\020\147\024\027\025\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\157\024\027\025\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\163\024\027\025\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\167\020" +
    "\147\024\027\025\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\005" +
    "\134\017\145\021\142\022\144\023\137\024\133\026\143" +
    "\027\132\030\174\001\001\000\006\032\177\033\175\001" +
    "\001\000\004\031\205\001\001\000\006\024\027\025\201" +
    "\001\001\000\006\032\177\033\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\005\134\017\145\021\142" +
    "\022\144\023\137\024\133\026\143\027\132\030\203\001" +
    "\001\000\002\001\001\000\024\005\134\017\145\021\142" +
    "\022\144\023\137\024\133\026\143\027\132\030\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\027\025\220\001\001\000\002\001" +
    "\001\000\024\005\134\017\145\021\142\022\144\023\137" +
    "\024\133\026\143\027\132\030\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\005\134\017\145\021\142" +
    "\022\144\023\137\024\133\026\143\027\132\030\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\114\014\251\001\001\000\010\007\120" +
    "\012\235\016\122\001\001\000\002\001\001\000\010\003" +
    "\237\007\005\010\007\001\001\000\024\005\134\017\145" +
    "\021\142\022\144\023\137\024\133\026\143\027\132\030" +
    "\240\001\001\000\002\001\001\000\012\013\242\020\147" +
    "\024\027\025\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\246\020\147\024\027" +
    "\025\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList ProcList 
            {
              Program RESULT =null;
		int vdclistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdclistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDecl> vdclist = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int prclistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prclistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Proc> prclist = (ArrayList<Proc>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program("ProgramOP", vdclist, prclist);

                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDecl> RESULT =null;
		int vdclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecl vdcl = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdclistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdclistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDecl> vdclist = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vdclist.add(0, vdcl); RESULT = vdclist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= 
            {
              ArrayList<VarDecl> RESULT =null;
		 RESULT = new ArrayList<VarDecl>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProcList ::= Proc 
            {
              ArrayList<Proc> RESULT =null;
		int prcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Proc prc = (Proc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Proc> temp = new ArrayList<Proc>();
                                                                    temp.add(0, prc);
                                                                    RESULT = temp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProcList ::= Proc ProcList 
            {
              ArrayList<Proc> RESULT =null;
		int prcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Proc prc = (Proc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int prclistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prclistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Proc> prclist = (ArrayList<Proc>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 prclist.add(0, prc); RESULT = prclist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdListInit SEMI 
            {
              VarDecl RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idlistinitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idlistinitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IdInit> idlistinit = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl("VarDeclOP", tipo, idlistinit);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Type("int");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new Type("bool");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new Type("float");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new Type("string");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IdListInit ::= ID 
            {
              ArrayList<IdInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<IdInit>(){{add(new IdInit("IdInitOP", new Identifier("Identifier", id)));}};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IdListInit ::= ID ASSIGN Expr 
            {
              ArrayList<IdInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<IdInit>(){{add(new IdInit("IdInitOP", new Identifier("Identifier", id),e));}};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= IdListInit COMMA ID 
            {
              ArrayList<IdInit> RESULT =null;
		int idlistinitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idlistinitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdInit> idlistinit = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 idlistinit.add(new IdInit("IdInitOP", new Identifier("Identifier", id))); RESULT = idlistinit;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              ArrayList<IdInit> RESULT =null;
		int idlistinitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idlistinitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<IdInit> idlistinit = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 idlistinit.add(new IdInit("IdInitOP", new Identifier("Identifier", id), e)); RESULT = idlistinit;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON VarDeclList StatList RETURN ReturnExprs CORP SEMI 
            {
              Proc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int prlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int prlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList<ParDecl> prlist = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int rtlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rtlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<Type> rtlist = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vdlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vdlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<VarDecl> vdlist = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Stat> stlist = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rtexprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rtexprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ReturnExprs rtexpr = (ReturnExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Proc("ProcOP", new Identifier("Identifier", id), prlist, rtlist, vdlist, stlist, rtexpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON VarDeclList RETURN ReturnExprs CORP SEMI 
            {
              Proc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int prlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int prlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ArrayList<ParDecl> prlist = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int rtlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rtlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<Type> rtlist = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDecl> vdlist = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rtexprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rtexprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ReturnExprs rtexpr = (ReturnExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Proc("ProcOP", new Identifier("Identifier", id), prlist, rtlist, vdlist, null, rtexpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Proc ::= PROC ID LPAR RPAR ResultTypeList COLON VarDeclList StatList RETURN ReturnExprs CORP SEMI 
            {
              Proc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rtlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rtlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<Type> rtlist = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vdlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vdlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<VarDecl> vdlist = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Stat> stlist = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rtexprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rtexprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ReturnExprs rtexpr = (ReturnExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Proc("ProcOP", new Identifier("Identifier", id), null, rtlist, vdlist, stlist, rtexpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proc ::= PROC ID LPAR RPAR ResultTypeList COLON VarDeclList RETURN ReturnExprs CORP SEMI 
            {
              Proc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int rtlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rtlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<Type> rtlist = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDecl> vdlist = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rtexprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rtexprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ReturnExprs rtexpr = (ReturnExprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Proc("ProcOP", new Identifier("Identifier", id), null, rtlist, vdlist, null, rtexpr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ResultTypeList ::= ResultType 
            {
              ArrayList<Type> RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Type>(){{add(0, tipo);}};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ResultTypeList ::= ResultType COMMA ResultTypeList 
            {
              ArrayList<Type> RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type tipo = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipolistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipolistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Type> tipolist = (ArrayList<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tipolist.add(0, tipo); RESULT = tipolist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ReturnExprs ::= ExprList 
            {
              ReturnExprs RESULT =null;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> elist = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnExprs("ReturnExprOP", elist);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ReturnExprs ::= 
            {
              ReturnExprs RESULT =null;
		 RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ExprList ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>(){{add(0, e);}};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> elist = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 elist.add(0, e); RESULT = elist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ParamDeclList ::= ParDecl 
            {
              ArrayList<ParDecl> RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDecl pd = (ParDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ParDecl>(){{add(pd);}};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParamDeclList ::= ParamDeclList SEMI ParDecl 
            {
              ArrayList<ParDecl> RESULT =null;
		int pdlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParDecl> pdlist = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDecl pd = (ParDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pdlist.add(pd); RESULT = pdlist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParDecl ::= Type IdList 
            {
              ParDecl RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type tip = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idlistaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idlistaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Identifier> idlista = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDecl("ParDeclOP", tip, idlista);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IdList ::= ID 
            {
              ArrayList<Identifier> RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Identifier> temp = new ArrayList<Identifier>();
                                                                    temp.add(new Identifier("Identifier", ide));
                                                                    RESULT = temp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IdList ::= IdList COMMA ID 
            {
              ArrayList<Identifier> RESULT =null;
		int idlistaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idlistaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Identifier> idlista = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 idlista.add(new Identifier("Identifier", ide)); RESULT = idlista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ResultType ::= Type 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type s = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultType",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ResultType ::= VOID 
            {
              Type RESULT =null;
		 RESULT = new Type("void");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultType",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StatList ::= Stat 
            {
              ArrayList<Stat> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Stat> tmp_list = new ArrayList<Stat>();
                                                                    tmp_list.add(s);
                                                                    RESULT = tmp_list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StatList ::= Stat StatList 
            {
              ArrayList<Stat> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Stat> stList = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 stList.add(0, s); RESULT = stList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= IfStat SEMI 
            {
              Stat RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfStat is = (IfStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = is;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= WhileStat SEMI 
            {
              Stat RESULT =null;
		int whsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int whsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhileStat whs = (WhileStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = whs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= ReadlnStat SEMI 
            {
              Stat RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReadlnStat rs = (ReadlnStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = rs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= WriteStat SEMI 
            {
              Stat RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WriteStat ws = (WriteStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ws;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= AssignStat SEMI 
            {
              Stat RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignStat as = (AssignStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = as;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= CallProc SEMI 
            {
              Stat RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallProc cp = (CallProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = cp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IfStat ::= IF Expr THEN StatList ElifList Else FI 
            {
              IfStat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Stat> st = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ElifListOPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ElifListOPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Elif> ElifListOP = (ArrayList<Elif>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elseOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elseOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Else elseOp = (Else)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if ( elseOp != null) RESULT = new IfStat("IfStatOP", (Expr) e, st, ElifListOP, elseOp);
                                                                                        else RESULT = new IfStat("IfStatOP", (Expr) e, st, ElifListOP);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ElifList ::= Elif ElifList 
            {
              ArrayList<Elif> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Elif el = (Elif)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ElifListOPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ElifListOPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Elif> ElifListOP = (ArrayList<Elif>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ElifListOP.add(0, el); RESULT = ElifListOP;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElifList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ElifList ::= 
            {
              ArrayList<Elif> RESULT =null;
		 RESULT = new ArrayList<Elif>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElifList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Elif ::= ELIF Expr THEN StatList 
            {
              Elif RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Stat> st = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Elif("ElifOP", e, st);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Else ::= ELSE StatList 
            {
              Else RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Stat> st = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Else("ElseOP",st);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Else ::= 
            {
              Else RESULT =null;
		 RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // WhileStat ::= WHILE StatList RETURN Expr DO StatList OD 
            {
              WhileStat RESULT =null;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<Stat> st1 = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Stat> st2 = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileStat("WhileStatOP",st1, e, st2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WhileStat ::= WHILE Expr DO StatList OD 
            {
              WhileStat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Stat> st2 = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileStat("WhileStatOP", e, st2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ReadlnStat ::= READ LPAR IdList RPAR 
            {
              ReadlnStat RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Identifier> il = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReadlnStat("ReadlnStatOP", il);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadlnStat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WriteStat ::= WRITE LPAR ExprList RPAR 
            {
              WriteStat RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> el = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WriteStat("WriteStatOP", el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignStat RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Identifier> il = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> el = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStat("AssignStatOP", il, el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CallProc ::= ID LPAR ExprList RPAR 
            {
              CallProc RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> arr = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallProc("CallProcOP", new Identifier("Identifier", s), arr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallProc",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CallProc ::= ID LPAR RPAR 
            {
              CallProc RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallProc("CallProcOP", new Identifier("Identifier", s));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallProc",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= NULL 
            {
              Expr RESULT =null;
		 RESULT = new Null("NULL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new True(true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new False(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= INT_CONST 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Int_const("IntConst", Integer.parseInt(n));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= FLOAT_CONST 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Float_const("Floatconst", Float.parseFloat(n));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String_const("StringConst", s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= ID 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier("Identifier",s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= CallProc 
            {
              Expr RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallProc call = (CallProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = call;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PLUS("PlusOP",(Expr) e1,(Expr) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MINUS("MinusOP",(Expr) e1,(Expr) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TIMES("TimesOP",(Expr) e1,(Expr) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DIV("DivOP",(Expr) e1,(Expr) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AND("AndOP", (Expr)e1,(Expr) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OR("OrOP", (Expr)e1,(Expr) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GT("GtOP",(Expr) e1,(Expr) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GE("GeOP",(Expr)e1,(Expr)e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LT("LtOP",(Expr)e1,(Expr)e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LE("LeOP",(Expr)e1,(Expr)e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EQ("EqOP",(Expr)e1,(Expr)e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NE("NEOP",(Expr) e1,(Expr) e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UMINUS("UminusOP",(Expr) e1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NOT("NotOP", (Expr)e1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= IFEXPR Expr THEN Expr ELSE Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IFEXPR("IfExpr",e,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
